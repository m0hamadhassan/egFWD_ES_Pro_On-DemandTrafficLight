
myProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000abe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000b32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001663  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a14  00000000  00000000  000023d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7b  00000000  00000000  00002de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d2  00000000  00000000  00003df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c25  00000000  00000000  000044c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000050eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  74:	0c 94 5d 05 	jmp	0xaba	; 0xaba <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
#include "../MCAL/TIMER0_NORMAL/TIMER0.h"
#include "../MCAL/EXT_INT/EXT_INT.h"
#include "../ECUAL/TRAFFIC_LIGHTS/TRAFFIC_LIGHTS.h"
#include "app.h"
ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	1f 92       	push	r1
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	// delay to detect long press and make no action
	uint8_t value;
	TIMER0_Delay(500);
  a8:	84 ef       	ldi	r24, 0xF4	; 244
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TIMER0_Delay>
	DIO_read(PIN2, PORTD, &value);
  b0:	ae 01       	movw	r20, r28
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	63 e0       	ldi	r22, 0x03	; 3
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_read>
	if (value == 0)
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	88 23       	and	r24, r24
  c2:	d1 f1       	breq	.+116    	; 0x138 <__vector_1+0xbc>
	}
	else
	{
		// there is on long press
		// check for current state (cars)
		uint8_t currentMode = T_Lights_CurrentMode();
  c4:	0e 94 32 01 	call	0x264	; 0x264 <T_Lights_CurrentMode>
		if (currentMode == CARS_GREEN || currentMode == CARS_YELLOW)
  c8:	84 50       	subi	r24, 0x04	; 4
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	e8 f4       	brcc	.+58     	; 0x108 <__vector_1+0x8c>
		{
			
			// if cars state is green or yellow
			/********************************************/
			// turn peds red on 
			PedsRedEnable();
  ce:	0e 94 28 01 	call	0x250	; 0x250 <PedsRedEnable>
			//turn car green off
			CarsGreenDisable();
  d2:	0e 94 ed 00 	call	0x1da	; 0x1da <CarsGreenDisable>
			// blink yellow for 5 secs
			BothSteady();
  d6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BothSteady>
			// turn  peds red off and turn peds green on
			PedsRedDisable();
  da:	0e 94 2d 01 	call	0x25a	; 0x25a <PedsRedDisable>
			PedsGreenEnable();
  de:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <PedsGreenEnable>
			// turn cars red on and turn cars green off
			CarsRedEnable();
  e2:	0e 94 1b 01 	call	0x236	; 0x236 <CarsRedEnable>
			CarsGreenDisable();
  e6:	0e 94 ed 00 	call	0x1da	; 0x1da <CarsGreenDisable>
			// wait for 5 secs
			TIMER0_Delay(5000);
  ea:	88 e8       	ldi	r24, 0x88	; 136
  ec:	93 e1       	ldi	r25, 0x13	; 19
  ee:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TIMER0_Delay>
			//turn car red off
			CarsRedDisable();
  f2:	0e 94 23 01 	call	0x246	; 0x246 <CarsRedDisable>
			// blink both yellow leds for 5 secs
			BothSteady();
  f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BothSteady>
			/********************************************/
			// turn all leds of
			TurnAllOff();
  fa:	0e 94 a3 01 	call	0x346	; 0x346 <TurnAllOff>
			// reset timer to escape after return
			TIMER0_reset();
  fe:	0e 94 d6 03 	call	0x7ac	; 0x7ac <TIMER0_reset>
			// reset normal mode to beginning
			ResetNormalMode();
 102:	0e 94 bc 01 	call	0x378	; 0x378 <ResetNormalMode>
 106:	18 c0       	rjmp	.+48     	; 0x138 <__vector_1+0xbc>
			/********************************************/
		}
		else if (T_Lights_CurrentMode() == CARS_RED)
 108:	0e 94 32 01 	call	0x264	; 0x264 <T_Lights_CurrentMode>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	a1 f4       	brne	.+40     	; 0x138 <__vector_1+0xbc>
		{
			// if cars state is  red
			/********************************************/
			//turn peds green on
			PedsGreenEnable();
 110:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <PedsGreenEnable>
			// turn cars red on and turn cars green off
			CarsRedEnable();
 114:	0e 94 1b 01 	call	0x236	; 0x236 <CarsRedEnable>
			CarsGreenDisable();
 118:	0e 94 ed 00 	call	0x1da	; 0x1da <CarsGreenDisable>
			// wait for 5 secs
			TIMER0_Delay(5000);
 11c:	88 e8       	ldi	r24, 0x88	; 136
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TIMER0_Delay>
			//turn cars red off
			CarsRedDisable();
 124:	0e 94 23 01 	call	0x246	; 0x246 <CarsRedDisable>
			// blink both yellow while peds green on
			BothSteady();
 128:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BothSteady>
			/********************************************/
			// turn off all leds
			TurnAllOff();
 12c:	0e 94 a3 01 	call	0x346	; 0x346 <TurnAllOff>
			// reset timer to escape after return
			TIMER0_reset();
 130:	0e 94 d6 03 	call	0x7ac	; 0x7ac <TIMER0_reset>
			// reset normal mode to beginning
			ResetNormalMode();
 134:	0e 94 bc 01 	call	0x378	; 0x378 <ResetNormalMode>
		}
	}
}
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <appInit>:

void appInit(void)
{
	// initialize external interrupt 0
	EXT_INT_init(INT0, FallingEdge);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 41 03 	call	0x682	; 0x682 <EXT_INT_init>
	// initialize traffic lights module
	T_Lights_init();
 168:	0e 94 cc 00 	call	0x198	; 0x198 <T_Lights_init>
 16c:	08 95       	ret

0000016e <appStart>:
}
void appStart(void)
{
	// enable external interrupt 0
	EXT_INT_enable(INT0);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 93 03 	call	0x726	; 0x726 <EXT_INT_enable>
	while (1)
	{
		// call normal mode function
		T_LIGHTS_NormalMode();
 174:	0e 94 65 01 	call	0x2ca	; 0x2ca <T_LIGHTS_NormalMode>
 178:	fd cf       	rjmp	.-6      	; 0x174 <appStart+0x6>

0000017a <LED_init>:
 */
#include "LED.h"
void LED_init(uint8_t ledPin, uint8_t ledPort)
{
	// initialize led pin to be output
	DIO_init(ledPin, ledPort, OUTPUT);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_init>
 180:	08 95       	ret

00000182 <LED_on>:
}
void LED_on(uint8_t ledPin, uint8_t ledPort)
{
	// set pin value high
	DIO_write(ledPin, ledPort, HIGH);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
 188:	08 95       	ret

0000018a <LED_off>:
}
void LED_off(uint8_t ledPin, uint8_t ledPort)
{
	// set pin value low
	DIO_write(ledPin, ledPort, LOW);
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
 190:	08 95       	ret

00000192 <LED_toggle>:
}
void LED_toggle(uint8_t ledPin, uint8_t ledPort)
{
	// toggle pin
	DIO_toggle(ledPin, ledPort);
 192:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_toggle>
 196:	08 95       	ret

00000198 <T_Lights_init>:
	LED_on(PIN0, PORTB);
}
void PedsGreenDisDisable(void)
{
	// turn peds green off
	LED_off(PIN0, PORTB);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 bd 00 	call	0x17a	; 0x17a <LED_init>
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 bd 00 	call	0x17a	; 0x17a <LED_init>
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 bd 00 	call	0x17a	; 0x17a <LED_init>
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 bd 00 	call	0x17a	; 0x17a <LED_init>
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 bd 00 	call	0x17a	; 0x17a <LED_init>
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 bd 00 	call	0x17a	; 0x17a <LED_init>
 1c8:	08 95       	ret

000001ca <CarsGreenEnable>:
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CarsMode>
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 c1 00 	call	0x182	; 0x182 <LED_on>
 1d8:	08 95       	ret

000001da <CarsGreenDisable>:
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
 1e2:	08 95       	ret

000001e4 <PedsGreenEnable>:
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 c1 00 	call	0x182	; 0x182 <LED_on>
 1ec:	08 95       	ret

000001ee <BothSteady>:
void BothSteady(void)
{
	// define variable to be iterator
	static uint8_t i;
	// set cars mode to yellow state
	CarsMode = CARS_YELLOW;
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CarsMode>
	// blink both yellow for  secs
	for (i = 0; i < 10; i++)
 1f4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i.1659>
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <BothSteady+0x2e>
	{
		// toggle both yellow every half second for  seconds
		LED_toggle(PIN1, PORTA);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 c9 00 	call	0x192	; 0x192 <LED_toggle>
		LED_toggle(PIN1, PORTB);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 c9 00 	call	0x192	; 0x192 <LED_toggle>
		TIMER0_Delay(500);
 20a:	84 ef       	ldi	r24, 0xF4	; 244
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TIMER0_Delay>
	// define variable to be iterator
	static uint8_t i;
	// set cars mode to yellow state
	CarsMode = CARS_YELLOW;
	// blink both yellow for  secs
	for (i = 0; i < 10; i++)
 212:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i.1659>
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i.1659>
 21c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i.1659>
 220:	8a 30       	cpi	r24, 0x0A	; 10
 222:	58 f3       	brcs	.-42     	; 0x1fa <BothSteady+0xc>
		LED_toggle(PIN1, PORTA);
		LED_toggle(PIN1, PORTB);
		TIMER0_Delay(500);
	}
	// turn both yellow leds off
	LED_off(PIN1, PORTA);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
	LED_off(PIN1, PORTB);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
 234:	08 95       	ret

00000236 <CarsRedEnable>:
	LED_off(PIN1, PORTA);
}
void CarsRedEnable(void)
{
	// set cars state to red state
	CarsMode = CARS_RED;
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CarsMode>
	// turn cars red on
	LED_on(PIN2, PORTA);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 c1 00 	call	0x182	; 0x182 <LED_on>
 244:	08 95       	ret

00000246 <CarsRedDisable>:
}
void CarsRedDisable(void)
{
	// turn cars red off
	LED_off(PIN2, PORTA);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
 24e:	08 95       	ret

00000250 <PedsRedEnable>:
}
void PedsRedEnable(void)
{
	// turn peds red on
	LED_on(PIN2, PORTB);
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 c1 00 	call	0x182	; 0x182 <LED_on>
 258:	08 95       	ret

0000025a <PedsRedDisable>:
}
void PedsRedDisable(void)
{
	// turn peds red off
	LED_off(PIN2, PORTB);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
 262:	08 95       	ret

00000264 <T_Lights_CurrentMode>:
}
uint8_t T_Lights_CurrentMode(void)
{
	// return curren car state
	return CarsMode;
}
 264:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <CarsMode>
 268:	08 95       	ret

0000026a <TurnCarsOff>:
void TurnCarsOff(void)
{
	// turn off all cars leds
	LED_off(PIN0, PORTA);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
	LED_off(PIN1, PORTA);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
	LED_off(PIN2, PORTA);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
 282:	08 95       	ret

00000284 <CarsSteady>:
void CarsSteady(void)
{
	// define variable to be iterator
	static uint8_t i;
	// set cars state to yellow state
	CarsMode = CARS_YELLOW;
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CarsMode>
	for (i = 0; i < 10; i++)
 28a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <CarsSteady+0x34>
	{
		// check for reset
		if (resetFlag == 1)
 290:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <resetFlag>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	19 f4       	brne	.+6      	; 0x29e <CarsSteady+0x1a>
		{
			TurnCarsOff();
 298:	0e 94 35 01 	call	0x26a	; 0x26a <TurnCarsOff>
			return;
 29c:	08 95       	ret
		}
		// toggle cars yellow
		LED_toggle(PIN1, PORTA);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 c9 00 	call	0x192	; 0x192 <LED_toggle>
		// delay for half secs
		TIMER0_Delay(500);
 2a6:	84 ef       	ldi	r24, 0xF4	; 244
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TIMER0_Delay>
{
	// define variable to be iterator
	static uint8_t i;
	// set cars state to yellow state
	CarsMode = CARS_YELLOW;
	for (i = 0; i < 10; i++)
 2ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2bc:	8a 30       	cpi	r24, 0x0A	; 10
 2be:	40 f3       	brcs	.-48     	; 0x290 <CarsSteady+0xc>
		LED_toggle(PIN1, PORTA);
		// delay for half secs
		TIMER0_Delay(500);
	}
	// turn of cars yellow
	LED_off(PIN1, PORTA);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
 2c8:	08 95       	ret

000002ca <T_LIGHTS_NormalMode>:
	LED_init(PIN2, PORTB);
}
void T_LIGHTS_NormalMode(void)
{
	// while normal mode hasn't been reset before
	while (resetFlag == 0)
 2ca:	38 c0       	rjmp	.+112    	; 0x33c <T_LIGHTS_NormalMode+0x72>
	{
		// turn cars green on
		CarsGreenEnable();
 2cc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <CarsGreenEnable>
		// wait for 5 secs then check for reset
		TIMER0_Delay(5000);
 2d0:	88 e8       	ldi	r24, 0x88	; 136
 2d2:	93 e1       	ldi	r25, 0x13	; 19
 2d4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TIMER0_Delay>
		if (resetFlag == 1)
 2d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <resetFlag>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	29 f4       	brne	.+10     	; 0x2ea <T_LIGHTS_NormalMode+0x20>
		{
			TurnCarsOff();
 2e0:	0e 94 35 01 	call	0x26a	; 0x26a <TurnCarsOff>
			resetFlag = 0;
 2e4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <resetFlag>
			break;
 2e8:	08 95       	ret
		}
		// turn cars green off
		CarsGreenDisable();
 2ea:	0e 94 ed 00 	call	0x1da	; 0x1da <CarsGreenDisable>
		// blink cars yellow for 5 secs
		CarsSteady();
 2ee:	0e 94 42 01 	call	0x284	; 0x284 <CarsSteady>
		// check for reset
		if (resetFlag == 1)
 2f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <resetFlag>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	29 f4       	brne	.+10     	; 0x304 <T_LIGHTS_NormalMode+0x3a>
		{
			TurnCarsOff();
 2fa:	0e 94 35 01 	call	0x26a	; 0x26a <TurnCarsOff>
			resetFlag = 0;
 2fe:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <resetFlag>
			break;
 302:	08 95       	ret
		}
		// turn cars red on
		CarsRedEnable();
 304:	0e 94 1b 01 	call	0x236	; 0x236 <CarsRedEnable>
		// wait for 5 secs then check for reset
		TIMER0_Delay(5000);
 308:	88 e8       	ldi	r24, 0x88	; 136
 30a:	93 e1       	ldi	r25, 0x13	; 19
 30c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TIMER0_Delay>
		if (resetFlag == 1)
 310:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <resetFlag>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	29 f4       	brne	.+10     	; 0x322 <T_LIGHTS_NormalMode+0x58>
		{
			TurnCarsOff();
 318:	0e 94 35 01 	call	0x26a	; 0x26a <TurnCarsOff>
			resetFlag = 0;
 31c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <resetFlag>
			break;
 320:	08 95       	ret
		}
		// turn cars red off
		CarsRedDisable();
 322:	0e 94 23 01 	call	0x246	; 0x246 <CarsRedDisable>
		// blink cars yellow for  secs
		CarsSteady();
 326:	0e 94 42 01 	call	0x284	; 0x284 <CarsSteady>
		// check for reset
		if (resetFlag == 1)
 32a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <resetFlag>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	29 f4       	brne	.+10     	; 0x33c <T_LIGHTS_NormalMode+0x72>
		{
			TurnCarsOff();
 332:	0e 94 35 01 	call	0x26a	; 0x26a <TurnCarsOff>
			resetFlag = 0;
 336:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <resetFlag>
			break;
 33a:	08 95       	ret
	LED_init(PIN2, PORTB);
}
void T_LIGHTS_NormalMode(void)
{
	// while normal mode hasn't been reset before
	while (resetFlag == 0)
 33c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <resetFlag>
 340:	88 23       	and	r24, r24
 342:	21 f2       	breq	.-120    	; 0x2cc <T_LIGHTS_NormalMode+0x2>
 344:	08 95       	ret

00000346 <TurnAllOff>:
	LED_off(PIN2, PORTA);
}
void TurnAllOff(void)
{
	// turn of both cars and peds leds
	LED_off(PIN0, PORTA);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
	LED_off(PIN1, PORTA);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
	LED_off(PIN2, PORTA);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
	LED_off(PIN0, PORTB);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
	LED_off(PIN1, PORTB);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
	LED_off(PIN2, PORTB);
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_off>
 376:	08 95       	ret

00000378 <ResetNormalMode>:
}
void ResetNormalMode(void)
{
	// set the reset flag to reset normal mode to initial flow
	resetFlag = 1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <resetFlag>
 37e:	08 95       	ret

00000380 <main>:
#include "APP/app.h"

void main(void)
{
	//initialize application
	appInit();
 380:	0e 94 b0 00 	call	0x160	; 0x160 <appInit>
	//start application
	appStart();
 384:	0e 94 b7 00 	call	0x16e	; 0x16e <appStart>
 388:	08 95       	ret

0000038a <DIO_init>:
#include "../../Utils/BitMath.h"

void DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	// check for pin direction
	switch (direction)
 38a:	44 23       	and	r20, r20
 38c:	09 f4       	brne	.+2      	; 0x390 <DIO_init+0x6>
 38e:	3f c0       	rjmp	.+126    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	09 f0       	breq	.+2      	; 0x396 <DIO_init+0xc>
 394:	7b c0       	rjmp	.+246    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
	{
	case OUTPUT:
		// check for port number
		switch (portNumber)
 396:	61 30       	cpi	r22, 0x01	; 1
 398:	99 f0       	breq	.+38     	; 0x3c0 <DIO_init+0x36>
 39a:	28 f0       	brcs	.+10     	; 0x3a6 <DIO_init+0x1c>
 39c:	62 30       	cpi	r22, 0x02	; 2
 39e:	e9 f0       	breq	.+58     	; 0x3da <DIO_init+0x50>
 3a0:	63 30       	cpi	r22, 0x03	; 3
 3a2:	41 f1       	breq	.+80     	; 0x3f4 <DIO_init+0x6a>
 3a4:	08 95       	ret
		{
		// set the selected pin in the selected port DDR register
		// so the pin became output
		case PORTA:
			Set_Bit(DDRA_REG, pinNumber);
 3a6:	4a b3       	in	r20, 0x1a	; 26
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	b9 01       	movw	r22, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_init+0x2a>
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	8a 95       	dec	r24
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_init+0x26>
 3b8:	cb 01       	movw	r24, r22
 3ba:	84 2b       	or	r24, r20
 3bc:	8a bb       	out	0x1a, r24	; 26
			break;
 3be:	08 95       	ret
		case PORTB:
			Set_Bit(DDRB_REG, pinNumber);
 3c0:	47 b3       	in	r20, 0x17	; 23
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	b9 01       	movw	r22, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_init+0x44>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_init+0x40>
 3d2:	cb 01       	movw	r24, r22
 3d4:	84 2b       	or	r24, r20
 3d6:	87 bb       	out	0x17, r24	; 23
			break;
 3d8:	08 95       	ret
		case PORTC:
			Set_Bit(DDRC_REG, pinNumber);
 3da:	44 b3       	in	r20, 0x14	; 20
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	b9 01       	movw	r22, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_init+0x5e>
 3e4:	66 0f       	add	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	8a 95       	dec	r24
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_init+0x5a>
 3ec:	cb 01       	movw	r24, r22
 3ee:	84 2b       	or	r24, r20
 3f0:	84 bb       	out	0x14, r24	; 20
			break;
 3f2:	08 95       	ret
		case PORTD:
			Set_Bit(DDRD_REG, pinNumber);
 3f4:	41 b3       	in	r20, 0x11	; 17
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	b9 01       	movw	r22, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	8a 95       	dec	r24
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_init+0x74>
 406:	cb 01       	movw	r24, r22
 408:	84 2b       	or	r24, r20
 40a:	81 bb       	out	0x11, r24	; 17
			break;
 40c:	08 95       	ret
		}
		break;
	case INPUT:
		switch (portNumber)
 40e:	61 30       	cpi	r22, 0x01	; 1
 410:	a1 f0       	breq	.+40     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 412:	28 f0       	brcs	.+10     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 414:	62 30       	cpi	r22, 0x02	; 2
 416:	f9 f0       	breq	.+62     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 418:	63 30       	cpi	r22, 0x03	; 3
 41a:	59 f1       	breq	.+86     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 41c:	08 95       	ret
		{
		// clear the selected pin in the selected port DDR register
		// so the pin became input
		case PORTA:
			Clear_Bit(DDRA_REG, pinNumber);
 41e:	4a b3       	in	r20, 0x1a	; 26
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	b9 01       	movw	r22, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	8a 95       	dec	r24
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	cb 01       	movw	r24, r22
 432:	80 95       	com	r24
 434:	84 23       	and	r24, r20
 436:	8a bb       	out	0x1a, r24	; 26
			break;
 438:	08 95       	ret
		case PORTB:
			Clear_Bit(DDRB_REG, pinNumber);
 43a:	47 b3       	in	r20, 0x17	; 23
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	b9 01       	movw	r22, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	cb 01       	movw	r24, r22
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	87 bb       	out	0x17, r24	; 23
			break;
 454:	08 95       	ret
		case PORTC:
			Clear_Bit(DDRC_REG, pinNumber);
 456:	44 b3       	in	r20, 0x14	; 20
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	b9 01       	movw	r22, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	8a 95       	dec	r24
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	cb 01       	movw	r24, r22
 46a:	80 95       	com	r24
 46c:	84 23       	and	r24, r20
 46e:	84 bb       	out	0x14, r24	; 20
			break;
 470:	08 95       	ret
		case PORTD:
			Clear_Bit(DDRD_REG, pinNumber);
 472:	41 b3       	in	r20, 0x11	; 17
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	b9 01       	movw	r22, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	8a 95       	dec	r24
 482:	e2 f7       	brpl	.-8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 484:	cb 01       	movw	r24, r22
 486:	80 95       	com	r24
 488:	84 23       	and	r24, r20
 48a:	81 bb       	out	0x11, r24	; 17
 48c:	08 95       	ret

0000048e <DIO_write>:
	}
}
void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{

	switch (value)
 48e:	44 23       	and	r20, r20
 490:	09 f4       	brne	.+2      	; 0x494 <DIO_write+0x6>
 492:	3f c0       	rjmp	.+126    	; 0x512 <DIO_write+0x84>
 494:	41 30       	cpi	r20, 0x01	; 1
 496:	09 f0       	breq	.+2      	; 0x49a <DIO_write+0xc>
 498:	7b c0       	rjmp	.+246    	; 0x590 <DIO_write+0x102>
	{
	// check for pin value
	case HIGH:
		// check for port number
		switch (portNumber)
 49a:	61 30       	cpi	r22, 0x01	; 1
 49c:	99 f0       	breq	.+38     	; 0x4c4 <DIO_write+0x36>
 49e:	28 f0       	brcs	.+10     	; 0x4aa <DIO_write+0x1c>
 4a0:	62 30       	cpi	r22, 0x02	; 2
 4a2:	e9 f0       	breq	.+58     	; 0x4de <DIO_write+0x50>
 4a4:	63 30       	cpi	r22, 0x03	; 3
 4a6:	41 f1       	breq	.+80     	; 0x4f8 <DIO_write+0x6a>
 4a8:	08 95       	ret
		{

		// set the selected pin in the selected port PORT register
		// so the pin value became high
		case PORTA:
			Set_Bit(PORTA_REG, pinNumber);
 4aa:	4b b3       	in	r20, 0x1b	; 27
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	b9 01       	movw	r22, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_write+0x2a>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_write+0x26>
 4bc:	cb 01       	movw	r24, r22
 4be:	84 2b       	or	r24, r20
 4c0:	8b bb       	out	0x1b, r24	; 27
			break;
 4c2:	08 95       	ret
		case PORTB:
			Set_Bit(PORTB_REG, pinNumber);
 4c4:	48 b3       	in	r20, 0x18	; 24
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_write+0x44>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_write+0x40>
 4d6:	cb 01       	movw	r24, r22
 4d8:	84 2b       	or	r24, r20
 4da:	88 bb       	out	0x18, r24	; 24
			break;
 4dc:	08 95       	ret
		case PORTC:
			Set_Bit(PORTC_REG, pinNumber);
 4de:	45 b3       	in	r20, 0x15	; 21
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_write+0x5e>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	8a 95       	dec	r24
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_write+0x5a>
 4f0:	cb 01       	movw	r24, r22
 4f2:	84 2b       	or	r24, r20
 4f4:	85 bb       	out	0x15, r24	; 21
			break;
 4f6:	08 95       	ret
		case PORTD:
			Set_Bit(PORTD_REG, pinNumber);
 4f8:	42 b3       	in	r20, 0x12	; 18
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	b9 01       	movw	r22, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_write+0x78>
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	8a 95       	dec	r24
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_write+0x74>
 50a:	cb 01       	movw	r24, r22
 50c:	84 2b       	or	r24, r20
 50e:	82 bb       	out	0x12, r24	; 18
			break;
 510:	08 95       	ret
		}
		break;
	case LOW:
		switch (portNumber)
 512:	61 30       	cpi	r22, 0x01	; 1
 514:	a1 f0       	breq	.+40     	; 0x53e <DIO_write+0xb0>
 516:	28 f0       	brcs	.+10     	; 0x522 <DIO_write+0x94>
 518:	62 30       	cpi	r22, 0x02	; 2
 51a:	f9 f0       	breq	.+62     	; 0x55a <DIO_write+0xcc>
 51c:	63 30       	cpi	r22, 0x03	; 3
 51e:	59 f1       	breq	.+86     	; 0x576 <DIO_write+0xe8>
 520:	08 95       	ret
		{
		// clear the selected pin in the selected port PORT register
		// so the pin value became low
		case PORTA:
			Clear_Bit(PORTA_REG, pinNumber);
 522:	4b b3       	in	r20, 0x1b	; 27
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_write+0xa2>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	8a 95       	dec	r24
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_write+0x9e>
 534:	cb 01       	movw	r24, r22
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	8b bb       	out	0x1b, r24	; 27
			break;
 53c:	08 95       	ret
		case PORTB:
			Clear_Bit(PORTB_REG, pinNumber);
 53e:	48 b3       	in	r20, 0x18	; 24
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	b9 01       	movw	r22, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_write+0xbe>
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	8a 95       	dec	r24
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_write+0xba>
 550:	cb 01       	movw	r24, r22
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	88 bb       	out	0x18, r24	; 24
			break;
 558:	08 95       	ret
		case PORTC:
			Clear_Bit(PORTC_REG, pinNumber);
 55a:	45 b3       	in	r20, 0x15	; 21
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_write+0xda>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	8a 95       	dec	r24
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_write+0xd6>
 56c:	cb 01       	movw	r24, r22
 56e:	80 95       	com	r24
 570:	84 23       	and	r24, r20
 572:	85 bb       	out	0x15, r24	; 21
			break;
 574:	08 95       	ret
		case PORTD:
			Clear_Bit(PORTD_REG, pinNumber);
 576:	42 b3       	in	r20, 0x12	; 18
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	b9 01       	movw	r22, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_write+0xf6>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_write+0xf2>
 588:	cb 01       	movw	r24, r22
 58a:	80 95       	com	r24
 58c:	84 23       	and	r24, r20
 58e:	82 bb       	out	0x12, r24	; 18
 590:	08 95       	ret

00000592 <DIO_toggle>:
		break;
	}
}
void DIO_toggle(uint8_t pinNumber, uint8_t portNumber)
{
	switch (portNumber)
 592:	61 30       	cpi	r22, 0x01	; 1
 594:	99 f0       	breq	.+38     	; 0x5bc <DIO_toggle+0x2a>
 596:	28 f0       	brcs	.+10     	; 0x5a2 <DIO_toggle+0x10>
 598:	62 30       	cpi	r22, 0x02	; 2
 59a:	e9 f0       	breq	.+58     	; 0x5d6 <DIO_toggle+0x44>
 59c:	63 30       	cpi	r22, 0x03	; 3
 59e:	41 f1       	breq	.+80     	; 0x5f0 <DIO_toggle+0x5e>
 5a0:	08 95       	ret
	{
	// check for port number
	// toggle the selected pin in the selected port PORT register
	case PORTA:
		Toggle_Bit(PORTA_REG, pinNumber);
 5a2:	4b b3       	in	r20, 0x1b	; 27
 5a4:	21 e0       	ldi	r18, 0x01	; 1
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	b9 01       	movw	r22, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_toggle+0x1e>
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	8a 95       	dec	r24
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_toggle+0x1a>
 5b4:	cb 01       	movw	r24, r22
 5b6:	84 27       	eor	r24, r20
 5b8:	8b bb       	out	0x1b, r24	; 27
		break;
 5ba:	08 95       	ret
	case PORTB:
		Toggle_Bit(PORTB_REG, pinNumber);
 5bc:	48 b3       	in	r20, 0x18	; 24
 5be:	21 e0       	ldi	r18, 0x01	; 1
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	b9 01       	movw	r22, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_toggle+0x38>
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	8a 95       	dec	r24
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_toggle+0x34>
 5ce:	cb 01       	movw	r24, r22
 5d0:	84 27       	eor	r24, r20
 5d2:	88 bb       	out	0x18, r24	; 24
		break;
 5d4:	08 95       	ret
	case PORTC:
		Toggle_Bit(PORTC_REG, pinNumber);
 5d6:	45 b3       	in	r20, 0x15	; 21
 5d8:	21 e0       	ldi	r18, 0x01	; 1
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	b9 01       	movw	r22, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_toggle+0x52>
 5e0:	66 0f       	add	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	8a 95       	dec	r24
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_toggle+0x4e>
 5e8:	cb 01       	movw	r24, r22
 5ea:	84 27       	eor	r24, r20
 5ec:	85 bb       	out	0x15, r24	; 21
		break;
 5ee:	08 95       	ret
	case PORTD:
		Toggle_Bit(PORTD_REG, pinNumber);
 5f0:	42 b3       	in	r20, 0x12	; 18
 5f2:	21 e0       	ldi	r18, 0x01	; 1
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	b9 01       	movw	r22, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_toggle+0x6c>
 5fa:	66 0f       	add	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	8a 95       	dec	r24
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_toggle+0x68>
 602:	cb 01       	movw	r24, r22
 604:	84 27       	eor	r24, r20
 606:	82 bb       	out	0x12, r24	; 18
 608:	08 95       	ret

0000060a <DIO_read>:
	}
}
void DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value)
{
	// check for port number
	switch (portNumber)
 60a:	61 30       	cpi	r22, 0x01	; 1
 60c:	99 f0       	breq	.+38     	; 0x634 <DIO_read+0x2a>
 60e:	28 f0       	brcs	.+10     	; 0x61a <DIO_read+0x10>
 610:	62 30       	cpi	r22, 0x02	; 2
 612:	e9 f0       	breq	.+58     	; 0x64e <DIO_read+0x44>
 614:	63 30       	cpi	r22, 0x03	; 3
 616:	41 f1       	breq	.+80     	; 0x668 <DIO_read+0x5e>
 618:	08 95       	ret
	{
	// get pin value for selected port PIN register
	//  and assign the value to given address
	case PORTA:
		*value = Get_Bit(PINA_REG, pinNumber);
 61a:	29 b3       	in	r18, 0x19	; 25
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	b9 01       	movw	r22, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_read+0x1c>
 622:	75 95       	asr	r23
 624:	67 95       	ror	r22
 626:	8a 95       	dec	r24
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_read+0x18>
 62a:	cb 01       	movw	r24, r22
 62c:	81 70       	andi	r24, 0x01	; 1
 62e:	fa 01       	movw	r30, r20
 630:	80 83       	st	Z, r24
		break;
 632:	08 95       	ret
	case PORTB:
		*value = Get_Bit(PINB_REG, pinNumber);
 634:	26 b3       	in	r18, 0x16	; 22
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	b9 01       	movw	r22, r18
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_read+0x36>
 63c:	75 95       	asr	r23
 63e:	67 95       	ror	r22
 640:	8a 95       	dec	r24
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_read+0x32>
 644:	cb 01       	movw	r24, r22
 646:	81 70       	andi	r24, 0x01	; 1
 648:	fa 01       	movw	r30, r20
 64a:	80 83       	st	Z, r24
		break;
 64c:	08 95       	ret
	case PORTC:
		*value = Get_Bit(PINC_REG, pinNumber);
 64e:	23 b3       	in	r18, 0x13	; 19
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	b9 01       	movw	r22, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_read+0x50>
 656:	75 95       	asr	r23
 658:	67 95       	ror	r22
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_read+0x4c>
 65e:	cb 01       	movw	r24, r22
 660:	81 70       	andi	r24, 0x01	; 1
 662:	fa 01       	movw	r30, r20
 664:	80 83       	st	Z, r24
		break;
 666:	08 95       	ret
	case PORTD:
		*value = Get_Bit(PIND_REG, pinNumber);
 668:	20 b3       	in	r18, 0x10	; 16
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_read+0x6a>
 670:	75 95       	asr	r23
 672:	67 95       	ror	r22
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_read+0x66>
 678:	cb 01       	movw	r24, r22
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	fa 01       	movw	r30, r20
 67e:	80 83       	st	Z, r24
 680:	08 95       	ret

00000682 <EXT_INT_init>:
 */
#include "EXT_INT.h"
#include "../DIO/DIO.h"
#include "../../Utils/BitMath.h"
void EXT_INT_init(Interrupt interupt, SenseControl senseControl)
{
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	c6 2f       	mov	r28, r22
	// enable global interrupt
	Set_Bit(S_REG, 7);
 68a:	9f b7       	in	r25, 0x3f	; 63
 68c:	90 68       	ori	r25, 0x80	; 128
 68e:	9f bf       	out	0x3f, r25	; 63
	//select and enable chosen interrupt with chosen sense control
	//and initialize its corresponding pin
	switch (interupt)
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	a9 f0       	breq	.+42     	; 0x6be <EXT_INT_init+0x3c>
 694:	18 f0       	brcs	.+6      	; 0x69c <EXT_INT_init+0x1a>
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	29 f1       	breq	.+74     	; 0x6e4 <EXT_INT_init+0x62>
 69a:	41 c0       	rjmp	.+130    	; 0x71e <EXT_INT_init+0x9c>
	{
	case INT0:
		if (senseControl == FallingEdge)
 69c:	62 30       	cpi	r22, 0x02	; 2
 69e:	29 f4       	brne	.+10     	; 0x6aa <EXT_INT_init+0x28>
		{
			DIO_write(PIN2, PORTD, HIGH);
 6a0:	41 e0       	ldi	r20, 0x01	; 1
 6a2:	63 e0       	ldi	r22, 0x03	; 3
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
		}
		DIO_init(PIN2, PORTD, INPUT);
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	63 e0       	ldi	r22, 0x03	; 3
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_init>
		MCUCR_REG = senseControl;
 6b4:	c5 bf       	out	0x35, r28	; 53
		Set_Bit(GICR_REG, 6);
 6b6:	8b b7       	in	r24, 0x3b	; 59
 6b8:	80 64       	ori	r24, 0x40	; 64
 6ba:	8b bf       	out	0x3b, r24	; 59
		break;
 6bc:	30 c0       	rjmp	.+96     	; 0x71e <EXT_INT_init+0x9c>
	case INT1:
		if (senseControl == FallingEdge)
 6be:	62 30       	cpi	r22, 0x02	; 2
 6c0:	29 f4       	brne	.+10     	; 0x6cc <EXT_INT_init+0x4a>
		{
			DIO_write(PIN3, PORTD, HIGH);
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	63 e0       	ldi	r22, 0x03	; 3
 6c6:	83 e0       	ldi	r24, 0x03	; 3
 6c8:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
		}
		DIO_init(PIN3, PORTD, INPUT);
 6cc:	40 e0       	ldi	r20, 0x00	; 0
 6ce:	63 e0       	ldi	r22, 0x03	; 3
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_init>
		MCUCR_REG = (senseControl << 2);
 6d6:	cc 0f       	add	r28, r28
 6d8:	cc 0f       	add	r28, r28
 6da:	c5 bf       	out	0x35, r28	; 53
		Set_Bit(GICR_REG, 7);
 6dc:	8b b7       	in	r24, 0x3b	; 59
 6de:	80 68       	ori	r24, 0x80	; 128
 6e0:	8b bf       	out	0x3b, r24	; 59
		break;
 6e2:	1d c0       	rjmp	.+58     	; 0x71e <EXT_INT_init+0x9c>
	case INT2:
		if (senseControl == FallingEdge)
 6e4:	62 30       	cpi	r22, 0x02	; 2
 6e6:	29 f4       	brne	.+10     	; 0x6f2 <EXT_INT_init+0x70>
		{
			DIO_write(PIN2, PORTB, HIGH);
 6e8:	41 e0       	ldi	r20, 0x01	; 1
 6ea:	61 e0       	ldi	r22, 0x01	; 1
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
		}
		DIO_init(PIN2, PORTB, INPUT);
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_init>
		MCUCSR_REG |= ((senseControl & 0x01) << 6);
 6fc:	84 b7       	in	r24, 0x34	; 52
 6fe:	0c 2f       	mov	r16, r28
 700:	01 70       	andi	r16, 0x01	; 1
 702:	10 e0       	ldi	r17, 0x00	; 0
 704:	00 24       	eor	r0, r0
 706:	16 95       	lsr	r17
 708:	07 95       	ror	r16
 70a:	07 94       	ror	r0
 70c:	16 95       	lsr	r17
 70e:	07 95       	ror	r16
 710:	07 94       	ror	r0
 712:	10 2f       	mov	r17, r16
 714:	00 2d       	mov	r16, r0
 716:	08 2b       	or	r16, r24
 718:	04 bf       	out	0x34, r16	; 52
		Set_Bit(GICR_REG, 8);
 71a:	8b b7       	in	r24, 0x3b	; 59
 71c:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	08 95       	ret

00000726 <EXT_INT_enable>:
void EXT_INT_enable(Interrupt interupt)
{
	switch (interupt)
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	59 f0       	breq	.+22     	; 0x740 <EXT_INT_enable+0x1a>
 72a:	18 f0       	brcs	.+6      	; 0x732 <EXT_INT_enable+0xc>
 72c:	82 30       	cpi	r24, 0x02	; 2
 72e:	79 f0       	breq	.+30     	; 0x74e <EXT_INT_enable+0x28>
 730:	08 95       	ret
	{
	case INT0:
		Set_Bit(S_REG, 7);
 732:	8f b7       	in	r24, 0x3f	; 63
 734:	80 68       	ori	r24, 0x80	; 128
 736:	8f bf       	out	0x3f, r24	; 63
		Set_Bit(GICR_REG, 6);
 738:	8b b7       	in	r24, 0x3b	; 59
 73a:	80 64       	ori	r24, 0x40	; 64
 73c:	8b bf       	out	0x3b, r24	; 59
		break;
 73e:	08 95       	ret
	case INT1:
		Set_Bit(S_REG, 7);
 740:	8f b7       	in	r24, 0x3f	; 63
 742:	80 68       	ori	r24, 0x80	; 128
 744:	8f bf       	out	0x3f, r24	; 63
		Set_Bit(GICR_REG, 7);
 746:	8b b7       	in	r24, 0x3b	; 59
 748:	80 68       	ori	r24, 0x80	; 128
 74a:	8b bf       	out	0x3b, r24	; 59
		break;
 74c:	08 95       	ret
	case INT2:
		Set_Bit(S_REG, 7);
 74e:	8f b7       	in	r24, 0x3f	; 63
 750:	80 68       	ori	r24, 0x80	; 128
 752:	8f bf       	out	0x3f, r24	; 63
		Set_Bit(GICR_REG, 8);
 754:	8b b7       	in	r24, 0x3b	; 59
 756:	8b bf       	out	0x3b, r24	; 59
 758:	08 95       	ret

0000075a <TIMER0_init>:
 75a:	62 bf       	out	0x32, r22	; 50
 75c:	83 bf       	out	0x33, r24	; 51
 75e:	08 95       	ret

00000760 <TIMER0_setPreload>:
 760:	82 bf       	out	0x32, r24	; 50
 762:	08 95       	ret

00000764 <TIMER0_start>:
 764:	ff 92       	push	r15
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	8c 01       	movw	r16, r24
 770:	f6 2e       	mov	r15, r22
 772:	c0 e0       	ldi	r28, 0x00	; 0
 774:	d0 e0       	ldi	r29, 0x00	; 0
 776:	11 c0       	rjmp	.+34     	; 0x79a <TIMER0_start+0x36>
 778:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <exitFlag>
 77c:	81 30       	cpi	r24, 0x01	; 1
 77e:	19 f4       	brne	.+6      	; 0x786 <TIMER0_start+0x22>
 780:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <exitFlag>
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <TIMER0_start+0x3c>
 786:	08 b6       	in	r0, 0x38	; 56
 788:	00 fe       	sbrs	r0, 0
 78a:	fd cf       	rjmp	.-6      	; 0x786 <TIMER0_start+0x22>
 78c:	21 96       	adiw	r28, 0x01	; 1
 78e:	8f 2d       	mov	r24, r15
 790:	0e 94 b0 03 	call	0x760	; 0x760 <TIMER0_setPreload>
 794:	88 b7       	in	r24, 0x38	; 56
 796:	81 60       	ori	r24, 0x01	; 1
 798:	88 bf       	out	0x38, r24	; 56
 79a:	c0 17       	cp	r28, r16
 79c:	d1 07       	cpc	r29, r17
 79e:	64 f3       	brlt	.-40     	; 0x778 <TIMER0_start+0x14>
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	ff 90       	pop	r15
 7aa:	08 95       	ret

000007ac <TIMER0_reset>:
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <exitFlag>
 7b2:	08 95       	ret

000007b4 <TIMER0_Delay>:
 7b4:	8f 92       	push	r8
 7b6:	9f 92       	push	r9
 7b8:	af 92       	push	r10
 7ba:	bf 92       	push	r11
 7bc:	cf 92       	push	r12
 7be:	df 92       	push	r13
 7c0:	ef 92       	push	r14
 7c2:	ff 92       	push	r15
 7c4:	cf 93       	push	r28
 7c6:	bc 01       	movw	r22, r24
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 cf 04 	call	0x99e	; 0x99e <__floatunsisf>
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	4a e7       	ldi	r20, 0x7A	; 122
 7d6:	54 e4       	ldi	r21, 0x44	; 68
 7d8:	0e 94 27 04 	call	0x84e	; 0x84e <__divsf3>
 7dc:	4b 01       	movw	r8, r22
 7de:	5c 01       	movw	r10, r24
 7e0:	2d eb       	ldi	r18, 0xBD	; 189
 7e2:	37 e3       	ldi	r19, 0x37	; 55
 7e4:	46 e8       	ldi	r20, 0x86	; 134
 7e6:	5c e3       	ldi	r21, 0x3C	; 60
 7e8:	0e 94 27 04 	call	0x84e	; 0x84e <__divsf3>
 7ec:	0e 94 99 04 	call	0x932	; 0x932 <__fixsfsi>
 7f0:	6b 01       	movw	r12, r22
 7f2:	7c 01       	movw	r14, r24
 7f4:	2d eb       	ldi	r18, 0xBD	; 189
 7f6:	37 e3       	ldi	r19, 0x37	; 55
 7f8:	46 e8       	ldi	r20, 0x86	; 134
 7fa:	5e e3       	ldi	r21, 0x3E	; 62
 7fc:	c5 01       	movw	r24, r10
 7fe:	b4 01       	movw	r22, r8
 800:	0e 94 27 04 	call	0x84e	; 0x84e <__divsf3>
 804:	4b 01       	movw	r8, r22
 806:	5c 01       	movw	r10, r24
 808:	b6 01       	movw	r22, r12
 80a:	0d 2c       	mov	r0, r13
 80c:	00 0c       	add	r0, r0
 80e:	88 0b       	sbc	r24, r24
 810:	99 0b       	sbc	r25, r25
 812:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatsisf>
 816:	9b 01       	movw	r18, r22
 818:	ac 01       	movw	r20, r24
 81a:	c5 01       	movw	r24, r10
 81c:	b4 01       	movw	r22, r8
 81e:	0e 94 27 04 	call	0x84e	; 0x84e <__divsf3>
 822:	0e 94 a0 04 	call	0x940	; 0x940 <__fixunssfsi>
 826:	c6 2f       	mov	r28, r22
 828:	c1 95       	neg	r28
 82a:	6c 2f       	mov	r22, r28
 82c:	83 e0       	ldi	r24, 0x03	; 3
 82e:	0e 94 ad 03 	call	0x75a	; 0x75a <TIMER0_init>
 832:	6c 2f       	mov	r22, r28
 834:	c6 01       	movw	r24, r12
 836:	0e 94 b2 03 	call	0x764	; 0x764 <TIMER0_start>
 83a:	cf 91       	pop	r28
 83c:	ff 90       	pop	r15
 83e:	ef 90       	pop	r14
 840:	df 90       	pop	r13
 842:	cf 90       	pop	r12
 844:	bf 90       	pop	r11
 846:	af 90       	pop	r10
 848:	9f 90       	pop	r9
 84a:	8f 90       	pop	r8
 84c:	08 95       	ret

0000084e <__divsf3>:
 84e:	0e 94 3b 04 	call	0x876	; 0x876 <__divsf3x>
 852:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_round>
 856:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscB>
 85a:	58 f0       	brcs	.+22     	; 0x872 <__stack+0x13>
 85c:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscA>
 860:	40 f0       	brcs	.+16     	; 0x872 <__stack+0x13>
 862:	29 f4       	brne	.+10     	; 0x86e <__stack+0xf>
 864:	5f 3f       	cpi	r21, 0xFF	; 255
 866:	29 f0       	breq	.+10     	; 0x872 <__stack+0x13>
 868:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_inf>
 86c:	51 11       	cpse	r21, r1
 86e:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_szero>
 872:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__fp_nan>

00000876 <__divsf3x>:
 876:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_split3>
 87a:	68 f3       	brcs	.-38     	; 0x856 <__divsf3+0x8>

0000087c <__divsf3_pse>:
 87c:	99 23       	and	r25, r25
 87e:	b1 f3       	breq	.-20     	; 0x86c <__stack+0xd>
 880:	55 23       	and	r21, r21
 882:	91 f3       	breq	.-28     	; 0x868 <__stack+0x9>
 884:	95 1b       	sub	r25, r21
 886:	55 0b       	sbc	r21, r21
 888:	bb 27       	eor	r27, r27
 88a:	aa 27       	eor	r26, r26
 88c:	62 17       	cp	r22, r18
 88e:	73 07       	cpc	r23, r19
 890:	84 07       	cpc	r24, r20
 892:	38 f0       	brcs	.+14     	; 0x8a2 <__divsf3_pse+0x26>
 894:	9f 5f       	subi	r25, 0xFF	; 255
 896:	5f 4f       	sbci	r21, 0xFF	; 255
 898:	22 0f       	add	r18, r18
 89a:	33 1f       	adc	r19, r19
 89c:	44 1f       	adc	r20, r20
 89e:	aa 1f       	adc	r26, r26
 8a0:	a9 f3       	breq	.-22     	; 0x88c <__divsf3_pse+0x10>
 8a2:	35 d0       	rcall	.+106    	; 0x90e <__divsf3_pse+0x92>
 8a4:	0e 2e       	mov	r0, r30
 8a6:	3a f0       	brmi	.+14     	; 0x8b6 <__divsf3_pse+0x3a>
 8a8:	e0 e8       	ldi	r30, 0x80	; 128
 8aa:	32 d0       	rcall	.+100    	; 0x910 <__divsf3_pse+0x94>
 8ac:	91 50       	subi	r25, 0x01	; 1
 8ae:	50 40       	sbci	r21, 0x00	; 0
 8b0:	e6 95       	lsr	r30
 8b2:	00 1c       	adc	r0, r0
 8b4:	ca f7       	brpl	.-14     	; 0x8a8 <__divsf3_pse+0x2c>
 8b6:	2b d0       	rcall	.+86     	; 0x90e <__divsf3_pse+0x92>
 8b8:	fe 2f       	mov	r31, r30
 8ba:	29 d0       	rcall	.+82     	; 0x90e <__divsf3_pse+0x92>
 8bc:	66 0f       	add	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	88 1f       	adc	r24, r24
 8c2:	bb 1f       	adc	r27, r27
 8c4:	26 17       	cp	r18, r22
 8c6:	37 07       	cpc	r19, r23
 8c8:	48 07       	cpc	r20, r24
 8ca:	ab 07       	cpc	r26, r27
 8cc:	b0 e8       	ldi	r27, 0x80	; 128
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3_pse+0x56>
 8d0:	bb 0b       	sbc	r27, r27
 8d2:	80 2d       	mov	r24, r0
 8d4:	bf 01       	movw	r22, r30
 8d6:	ff 27       	eor	r31, r31
 8d8:	93 58       	subi	r25, 0x83	; 131
 8da:	5f 4f       	sbci	r21, 0xFF	; 255
 8dc:	3a f0       	brmi	.+14     	; 0x8ec <__divsf3_pse+0x70>
 8de:	9e 3f       	cpi	r25, 0xFE	; 254
 8e0:	51 05       	cpc	r21, r1
 8e2:	78 f0       	brcs	.+30     	; 0x902 <__divsf3_pse+0x86>
 8e4:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_inf>
 8e8:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_szero>
 8ec:	5f 3f       	cpi	r21, 0xFF	; 255
 8ee:	e4 f3       	brlt	.-8      	; 0x8e8 <__divsf3_pse+0x6c>
 8f0:	98 3e       	cpi	r25, 0xE8	; 232
 8f2:	d4 f3       	brlt	.-12     	; 0x8e8 <__divsf3_pse+0x6c>
 8f4:	86 95       	lsr	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b7 95       	ror	r27
 8fc:	f7 95       	ror	r31
 8fe:	9f 5f       	subi	r25, 0xFF	; 255
 900:	c9 f7       	brne	.-14     	; 0x8f4 <__divsf3_pse+0x78>
 902:	88 0f       	add	r24, r24
 904:	91 1d       	adc	r25, r1
 906:	96 95       	lsr	r25
 908:	87 95       	ror	r24
 90a:	97 f9       	bld	r25, 7
 90c:	08 95       	ret
 90e:	e1 e0       	ldi	r30, 0x01	; 1
 910:	66 0f       	add	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	88 1f       	adc	r24, r24
 916:	bb 1f       	adc	r27, r27
 918:	62 17       	cp	r22, r18
 91a:	73 07       	cpc	r23, r19
 91c:	84 07       	cpc	r24, r20
 91e:	ba 07       	cpc	r27, r26
 920:	20 f0       	brcs	.+8      	; 0x92a <__divsf3_pse+0xae>
 922:	62 1b       	sub	r22, r18
 924:	73 0b       	sbc	r23, r19
 926:	84 0b       	sbc	r24, r20
 928:	ba 0b       	sbc	r27, r26
 92a:	ee 1f       	adc	r30, r30
 92c:	88 f7       	brcc	.-30     	; 0x910 <__divsf3_pse+0x94>
 92e:	e0 95       	com	r30
 930:	08 95       	ret

00000932 <__fixsfsi>:
 932:	0e 94 a0 04 	call	0x940	; 0x940 <__fixunssfsi>
 936:	68 94       	set
 938:	b1 11       	cpse	r27, r1
 93a:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_szero>
 93e:	08 95       	ret

00000940 <__fixunssfsi>:
 940:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_splitA>
 944:	88 f0       	brcs	.+34     	; 0x968 <__fixunssfsi+0x28>
 946:	9f 57       	subi	r25, 0x7F	; 127
 948:	98 f0       	brcs	.+38     	; 0x970 <__fixunssfsi+0x30>
 94a:	b9 2f       	mov	r27, r25
 94c:	99 27       	eor	r25, r25
 94e:	b7 51       	subi	r27, 0x17	; 23
 950:	b0 f0       	brcs	.+44     	; 0x97e <__fixunssfsi+0x3e>
 952:	e1 f0       	breq	.+56     	; 0x98c <__fixunssfsi+0x4c>
 954:	66 0f       	add	r22, r22
 956:	77 1f       	adc	r23, r23
 958:	88 1f       	adc	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	1a f0       	brmi	.+6      	; 0x964 <__fixunssfsi+0x24>
 95e:	ba 95       	dec	r27
 960:	c9 f7       	brne	.-14     	; 0x954 <__fixunssfsi+0x14>
 962:	14 c0       	rjmp	.+40     	; 0x98c <__fixunssfsi+0x4c>
 964:	b1 30       	cpi	r27, 0x01	; 1
 966:	91 f0       	breq	.+36     	; 0x98c <__fixunssfsi+0x4c>
 968:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_zero>
 96c:	b1 e0       	ldi	r27, 0x01	; 1
 96e:	08 95       	ret
 970:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_zero>
 974:	67 2f       	mov	r22, r23
 976:	78 2f       	mov	r23, r24
 978:	88 27       	eor	r24, r24
 97a:	b8 5f       	subi	r27, 0xF8	; 248
 97c:	39 f0       	breq	.+14     	; 0x98c <__fixunssfsi+0x4c>
 97e:	b9 3f       	cpi	r27, 0xF9	; 249
 980:	cc f3       	brlt	.-14     	; 0x974 <__fixunssfsi+0x34>
 982:	86 95       	lsr	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	b3 95       	inc	r27
 98a:	d9 f7       	brne	.-10     	; 0x982 <__fixunssfsi+0x42>
 98c:	3e f4       	brtc	.+14     	; 0x99c <__fixunssfsi+0x5c>
 98e:	90 95       	com	r25
 990:	80 95       	com	r24
 992:	70 95       	com	r23
 994:	61 95       	neg	r22
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	08 95       	ret

0000099e <__floatunsisf>:
 99e:	e8 94       	clt
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <__floatsisf+0x12>

000009a2 <__floatsisf>:
 9a2:	97 fb       	bst	r25, 7
 9a4:	3e f4       	brtc	.+14     	; 0x9b4 <__floatsisf+0x12>
 9a6:	90 95       	com	r25
 9a8:	80 95       	com	r24
 9aa:	70 95       	com	r23
 9ac:	61 95       	neg	r22
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255
 9b0:	8f 4f       	sbci	r24, 0xFF	; 255
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	99 23       	and	r25, r25
 9b6:	a9 f0       	breq	.+42     	; 0x9e2 <__floatsisf+0x40>
 9b8:	f9 2f       	mov	r31, r25
 9ba:	96 e9       	ldi	r25, 0x96	; 150
 9bc:	bb 27       	eor	r27, r27
 9be:	93 95       	inc	r25
 9c0:	f6 95       	lsr	r31
 9c2:	87 95       	ror	r24
 9c4:	77 95       	ror	r23
 9c6:	67 95       	ror	r22
 9c8:	b7 95       	ror	r27
 9ca:	f1 11       	cpse	r31, r1
 9cc:	f8 cf       	rjmp	.-16     	; 0x9be <__floatsisf+0x1c>
 9ce:	fa f4       	brpl	.+62     	; 0xa0e <__floatsisf+0x6c>
 9d0:	bb 0f       	add	r27, r27
 9d2:	11 f4       	brne	.+4      	; 0x9d8 <__floatsisf+0x36>
 9d4:	60 ff       	sbrs	r22, 0
 9d6:	1b c0       	rjmp	.+54     	; 0xa0e <__floatsisf+0x6c>
 9d8:	6f 5f       	subi	r22, 0xFF	; 255
 9da:	7f 4f       	sbci	r23, 0xFF	; 255
 9dc:	8f 4f       	sbci	r24, 0xFF	; 255
 9de:	9f 4f       	sbci	r25, 0xFF	; 255
 9e0:	16 c0       	rjmp	.+44     	; 0xa0e <__floatsisf+0x6c>
 9e2:	88 23       	and	r24, r24
 9e4:	11 f0       	breq	.+4      	; 0x9ea <__floatsisf+0x48>
 9e6:	96 e9       	ldi	r25, 0x96	; 150
 9e8:	11 c0       	rjmp	.+34     	; 0xa0c <__floatsisf+0x6a>
 9ea:	77 23       	and	r23, r23
 9ec:	21 f0       	breq	.+8      	; 0x9f6 <__floatsisf+0x54>
 9ee:	9e e8       	ldi	r25, 0x8E	; 142
 9f0:	87 2f       	mov	r24, r23
 9f2:	76 2f       	mov	r23, r22
 9f4:	05 c0       	rjmp	.+10     	; 0xa00 <__floatsisf+0x5e>
 9f6:	66 23       	and	r22, r22
 9f8:	71 f0       	breq	.+28     	; 0xa16 <__floatsisf+0x74>
 9fa:	96 e8       	ldi	r25, 0x86	; 134
 9fc:	86 2f       	mov	r24, r22
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	2a f0       	brmi	.+10     	; 0xa0e <__floatsisf+0x6c>
 a04:	9a 95       	dec	r25
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	da f7       	brpl	.-10     	; 0xa04 <__floatsisf+0x62>
 a0e:	88 0f       	add	r24, r24
 a10:	96 95       	lsr	r25
 a12:	87 95       	ror	r24
 a14:	97 f9       	bld	r25, 7
 a16:	08 95       	ret

00000a18 <__fp_inf>:
 a18:	97 f9       	bld	r25, 7
 a1a:	9f 67       	ori	r25, 0x7F	; 127
 a1c:	80 e8       	ldi	r24, 0x80	; 128
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	60 e0       	ldi	r22, 0x00	; 0
 a22:	08 95       	ret

00000a24 <__fp_nan>:
 a24:	9f ef       	ldi	r25, 0xFF	; 255
 a26:	80 ec       	ldi	r24, 0xC0	; 192
 a28:	08 95       	ret

00000a2a <__fp_pscA>:
 a2a:	00 24       	eor	r0, r0
 a2c:	0a 94       	dec	r0
 a2e:	16 16       	cp	r1, r22
 a30:	17 06       	cpc	r1, r23
 a32:	18 06       	cpc	r1, r24
 a34:	09 06       	cpc	r0, r25
 a36:	08 95       	ret

00000a38 <__fp_pscB>:
 a38:	00 24       	eor	r0, r0
 a3a:	0a 94       	dec	r0
 a3c:	12 16       	cp	r1, r18
 a3e:	13 06       	cpc	r1, r19
 a40:	14 06       	cpc	r1, r20
 a42:	05 06       	cpc	r0, r21
 a44:	08 95       	ret

00000a46 <__fp_round>:
 a46:	09 2e       	mov	r0, r25
 a48:	03 94       	inc	r0
 a4a:	00 0c       	add	r0, r0
 a4c:	11 f4       	brne	.+4      	; 0xa52 <__fp_round+0xc>
 a4e:	88 23       	and	r24, r24
 a50:	52 f0       	brmi	.+20     	; 0xa66 <__fp_round+0x20>
 a52:	bb 0f       	add	r27, r27
 a54:	40 f4       	brcc	.+16     	; 0xa66 <__fp_round+0x20>
 a56:	bf 2b       	or	r27, r31
 a58:	11 f4       	brne	.+4      	; 0xa5e <__fp_round+0x18>
 a5a:	60 ff       	sbrs	r22, 0
 a5c:	04 c0       	rjmp	.+8      	; 0xa66 <__fp_round+0x20>
 a5e:	6f 5f       	subi	r22, 0xFF	; 255
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	08 95       	ret

00000a68 <__fp_split3>:
 a68:	57 fd       	sbrc	r21, 7
 a6a:	90 58       	subi	r25, 0x80	; 128
 a6c:	44 0f       	add	r20, r20
 a6e:	55 1f       	adc	r21, r21
 a70:	59 f0       	breq	.+22     	; 0xa88 <__fp_splitA+0x10>
 a72:	5f 3f       	cpi	r21, 0xFF	; 255
 a74:	71 f0       	breq	.+28     	; 0xa92 <__fp_splitA+0x1a>
 a76:	47 95       	ror	r20

00000a78 <__fp_splitA>:
 a78:	88 0f       	add	r24, r24
 a7a:	97 fb       	bst	r25, 7
 a7c:	99 1f       	adc	r25, r25
 a7e:	61 f0       	breq	.+24     	; 0xa98 <__fp_splitA+0x20>
 a80:	9f 3f       	cpi	r25, 0xFF	; 255
 a82:	79 f0       	breq	.+30     	; 0xaa2 <__fp_splitA+0x2a>
 a84:	87 95       	ror	r24
 a86:	08 95       	ret
 a88:	12 16       	cp	r1, r18
 a8a:	13 06       	cpc	r1, r19
 a8c:	14 06       	cpc	r1, r20
 a8e:	55 1f       	adc	r21, r21
 a90:	f2 cf       	rjmp	.-28     	; 0xa76 <__fp_split3+0xe>
 a92:	46 95       	lsr	r20
 a94:	f1 df       	rcall	.-30     	; 0xa78 <__fp_splitA>
 a96:	08 c0       	rjmp	.+16     	; 0xaa8 <__fp_splitA+0x30>
 a98:	16 16       	cp	r1, r22
 a9a:	17 06       	cpc	r1, r23
 a9c:	18 06       	cpc	r1, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	f1 cf       	rjmp	.-30     	; 0xa84 <__fp_splitA+0xc>
 aa2:	86 95       	lsr	r24
 aa4:	71 05       	cpc	r23, r1
 aa6:	61 05       	cpc	r22, r1
 aa8:	08 94       	sec
 aaa:	08 95       	ret

00000aac <__fp_zero>:
 aac:	e8 94       	clt

00000aae <__fp_szero>:
 aae:	bb 27       	eor	r27, r27
 ab0:	66 27       	eor	r22, r22
 ab2:	77 27       	eor	r23, r23
 ab4:	cb 01       	movw	r24, r22
 ab6:	97 f9       	bld	r25, 7
 ab8:	08 95       	ret

00000aba <_exit>:
 aba:	f8 94       	cli

00000abc <__stop_program>:
 abc:	ff cf       	rjmp	.-2      	; 0xabc <__stop_program>
